services:
  server:
    build:
      context: ./backend
      dockerfile: Dockerfile.server
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      migrate:
        condition: service_completed_successfully

  fetcher:
    profiles: [fetcher]
    build:
      context: ./backend
      dockerfile: Dockerfile.fetcher
    restart: no
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      migrate:
        condition: service_completed_successfully

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:4
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/migrations:/migrations:ro,Z
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: [
      "-path", "/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app:z
    working_dir: /app
    command: sh -c "npm run dev & npm run serve"
    ports:
      - "3000:3000" # Browsersync site
      - "3001:3001" # Browsersync UI


  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro,z
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro,Z
    ports:
      - "80:80"
    depends_on:
      - server
      - frontend

volumes:
  db:
